package ${package.Controller};


#if(${swagger})
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiOperation;
#end
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import ${package.Service}.${table.serviceName};
import ${ro};
import ${qo};
import ${r};

## 判断是否包含父类
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} controller
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@RequiredArgsConstructor(onConstructor_ = @Autowired)
## swagger相关
#if(${swagger})
@Api(tags = "REST - $!{table.comment}")
#end
## controller注解
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
## 请求地址
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
## 类名及继承判断
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
## 注入服务类
    private final ${table.serviceName} service;

## 主键类型判断
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
## 主键类型
        #set($idType=${field.propertyType})
## 主键名称
        #set($idName=${field.propertyName})
## 跳出
        #break
    #end
#end
    @PostMapping("/create")
#if(${swagger})
    @ApiOperation(value = "新增")
#end
    public R createOne(@RequestBody ${entity}RO ro){
        boolean flag = service.create(ro);
        return R.judgeR(flag, flag ? "创建成功" : "创建失败");
    }

    @DeleteMapping("/delete/{${idName}}")
#if(${swagger})
    @ApiOperation(value = "删除")
#end
    public R delete(@PathVariable("${idName}")${idType} ${idName}){
        boolean flag = service.delete(${idName});
        return R.judgeR(flag, flag ? "删除成功" : "删除失败");
    }

    @PutMapping("/update")
#if(${swagger})
    @ApiOperation(value = "修改")
#end
    public R update(@RequestBody ${entity}RO ro){
        boolean flag = service.update(ro);
        return R.judgeR(flag, flag ? "修改成功" : "修改失败");
    }

    @GetMapping("/{${idName}}")
#if(${swagger})
    @ApiOperation(value = "单条查询")
#end
    public R getOne(@PathVariable("${idName}")${idType} ${idName}){

        return R.success(service.getById(${idName}));
    }

    @PostMapping("/findList")
#if(${swagger})
    @ApiOperation(value = "列表查询")
#end
    public R findList(@RequestBody ${entity}QO qo){

        return R.success(service.findList(qo));
    }

    @PostMapping("/findPage")
#if(${swagger})
    @ApiOperation(value = "分页查询")
#end
    public R findPage(@RequestBody ${entity}QO qo){

        return R.success(service.findPage(qo));
    }

}